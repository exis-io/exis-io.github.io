{
    "Pub/Sub Basic": {
        "js": {
            "publish": {
                "code": [
                    "    backend.Publish(\"basicSub\", \"Hello\");"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/sub-client.js",
                "lineEnd": 14,
                "lineStart": 13
            },
            "subscribe": {
                "code": [
                    "    this.Subscribe(\"basicSub\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/sub-backend.js",
                "lineEnd": 26,
                "lineStart": 23
            }
        },
        "python": {
            "publish": {
                "code": [
                    "        self.publish(\"basicSub\", \"Hello\")"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/sub-client.py",
                "lineEnd": 14,
                "lineStart": 13
            },
            "subscribe": {
                "code": [
                    "        @want(str)",
                    "        def basicSub(s):",
                    "            print s  # Expects a str, like \"Hello\"",
                    "        self.subscribe(\"basicSub\", basicSub)"
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/sub-backend.py",
                "lineEnd": 18,
                "lineStart": 14
            }
        },
        "swift": {
            "publish": {
                "code": [
                    "        publish(\"xs.test.example/basicSub\", \"Hello\")"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../swift/example/sender.swift",
                "lineEnd": 11,
                "lineStart": 10
            },
            "subscribe": {
                "code": [
                    "        subscribe(\"sub\") { (a: Int, b: [String], c: Dog) in",
                    "            print(\"Received publish: \\(a), with list: \\(b), and pup: \\(c.description)\")",
                    "        }.then {",
                    "            print(\"Subscription succeeded\")",
                    "        }.error { reason in",
                    "            print(\"An error occured\", reason)",
                    "        }"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../swift/example/receiver.swift",
                "lineEnd": 31,
                "lineStart": 24
            }
        }
    },
    "Pub/Sub Basic Two": {
        "js": {
            "publish": {
                "code": [
                    "    backend.Publish(\"basicSubTwo\", \"Hello\", 3);"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/sub-client.js",
                "lineEnd": 18,
                "lineStart": 17
            },
            "subscribe": {
                "code": [
                    "    this.Subscribe(\"basicSubTwo\", riffle.want(function(s, i) {",
                    "        console.log(s, i); // Expects a String, Number, like \"Hello\", 3.0",
                    "    }, String, Number));"
                ],
                "expectType": "String, Number",
                "expectVal": "\"Hello\", 3.0",
                "file": "../js/example/sub-backend.js",
                "lineEnd": 32,
                "lineStart": 29
            }
        }
    },
    "Pub/Sub Objects": {
        "python": {
            "publish": {
                "code": [
                    "        class Stuff(riffle.Model):",
                    "            name = \"This guy\"",
                    "        s = Stuff()",
                    "        self.publish(\"objectSub\", s)"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/sub-client.py",
                "lineEnd": 21,
                "lineStart": 17
            },
            "subscribe": {
                "code": [
                    "        class Stuff(riffle.Model):",
                    "            name = \"\"",
                    "        @want(Stuff)",
                    "        def objectSub(o):",
                    "            print o  # Expects an object, like Stuff",
                    "",
                    "        self.subscribe(\"objectSub\", objectSub)"
                ],
                "expectType": "object",
                "expectVal": "Stuff",
                "file": "../python/example/sub-backend.py",
                "lineEnd": 28,
                "lineStart": 21
            }
        }
    },
    "Reg/Call Basic 1": {
        "swift": {
            "call": {
                "code": [
                    "        call(\"xs.test.example/basicReg\", \"Hello\").then { (a: String) in",
                    "            print(\"\\(a)\") // Expects a String, like \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello World\"",
                "file": "../swift/example/sender.swift",
                "lineEnd": 17,
                "lineStart": 14
            },
            "register": {
                "code": [
                    "        register(\"basicReg\") { (args: String) -> String in",
                    "            print(\"\\(args)\") // Expects a String, like \"Hello\"",
                    "            return \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../swift/example/receiver.swift",
                "lineEnd": 38,
                "lineStart": 34
            }
        }
    },
    "Reg/Call int str": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"regIntStr\", 42).then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a str, like \"Hello World\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "str",
                "expectVal": "\"Hello World\"",
                "file": "../js/example/reg-client.js",
                "lineEnd": 37,
                "lineStart": 31
            },
            "register": {
                "code": [
                    "    this.Register(\"regIntStr\", riffle.want(function(i) {",
                    "        console.log(i); // Expects a Number, like 42",
                    "        return \"Hello World\";",
                    "    }, Number));"
                ],
                "expectType": "Number",
                "expectVal": "42",
                "file": "../js/example/reg-backend.js",
                "lineEnd": 30,
                "lineStart": 26
            }
        },
        "python": {
            "call": {
                "code": [
                    "        s = backend.call(\"regIntStr\", 42).wait(str)",
                    "        print s # Expects a str, like \"Hello World\""
                ],
                "expectType": "str",
                "expectVal": "\"Hello World\"",
                "file": "../python/example/reg-client.py",
                "lineEnd": 26,
                "lineStart": 24
            },
            "register": {
                "code": [
                    "        @want(int)",
                    "        def regIntStr(i):",
                    "            print(i)  # Expects an int, like 42",
                    "            return \"Hello World\"",
                    "        self.register(\"regIntStr\", regIntStr)"
                ],
                "expectType": "int",
                "expectVal": "42",
                "file": "../python/example/reg-backend.py",
                "lineEnd": 34,
                "lineStart": 29
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"regIntStr\", 42).then { (s: String) in",
                    "            print(s) // Expects a String, like \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello World\"",
                "file": "../swift/example/reg-client.swift",
                "lineEnd": 22,
                "lineStart": 19
            },
            "register": {
                "code": [
                    "        register(\"regIntStr\") { (i: Int) -> String in",
                    "            print(i) // Expects an Int, like 42",
                    "            return \"Hello World\"",
                    "        }"
                ],
                "expectType": "Int",
                "expectVal": "42",
                "file": "../swift/example/reg-backend.swift",
                "lineEnd": 25,
                "lineStart": 21
            }
        }
    },
    "Reg/Call str int": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"regStrInt\", \"Hello\").then(riffle.wait(function (i) {",
                    "        console.log(i); // Expects an int, like 42",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "int",
                "expectVal": "42",
                "file": "../js/example/reg-client.js",
                "lineEnd": 28,
                "lineStart": 22
            },
            "register": {
                "code": [
                    "    this.Register(\"regStrInt\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "        return 42;",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/reg-backend.js",
                "lineEnd": 23,
                "lineStart": 19
            }
        },
        "python": {
            "call": {
                "code": [
                    "        i = backend.call(\"regStrInt\", \"Hello\").wait(int)",
                    "        print i # Expects an int, like 42"
                ],
                "expectType": "int",
                "expectVal": "42",
                "file": "../python/example/reg-client.py",
                "lineEnd": 21,
                "lineStart": 19
            },
            "register": {
                "code": [
                    "        @want(str)",
                    "        def regStrInt(s):",
                    "            print(s)  # Expects a str, like \"Hello\"",
                    "            return 42",
                    "        self.register(\"regStrInt\", regStrInt)"
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/reg-backend.py",
                "lineEnd": 26,
                "lineStart": 21
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"regStrInt\", \"Hello\").then { (i: Int) in",
                    "            print(\"\\(i)\") // Expects an Int, like 42",
                    "        }"
                ],
                "expectType": "Int",
                "expectVal": "42",
                "file": "../swift/example/reg-client.swift",
                "lineEnd": 16,
                "lineStart": 13
            },
            "register": {
                "code": [
                    "        register(\"regStrInt\") { (s: String) -> Int in",
                    "            print(s) // Expects a String, like \"Hello\"",
                    "            return 42",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../swift/example/reg-backend.swift",
                "lineEnd": 18,
                "lineStart": 14
            }
        }
    },
    "Reg/Call str str": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"regStrStr\", \"Hello\").then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a str, like \"Hello World\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "str",
                "expectVal": "\"Hello World\"",
                "file": "../js/example/reg-client.js",
                "lineEnd": 19,
                "lineStart": 13
            },
            "register": {
                "code": [
                    "    this.Register(\"regStrStr\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "        return \"Hello World\";",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/reg-backend.js",
                "lineEnd": 16,
                "lineStart": 12
            }
        },
        "python": {
            "call": {
                "code": [
                    "        s = backend.call(\"regStrStr\", \"Hello\").wait(str)",
                    "        print s # Expects a str, like \"Hello World\""
                ],
                "expectType": "str",
                "expectVal": "\"Hello World\"",
                "file": "../python/example/reg-client.py",
                "lineEnd": 16,
                "lineStart": 14
            },
            "register": {
                "code": [
                    "        @want(str)",
                    "        def regStrStr(s):",
                    "            print(s)  # Expects a str, like \"Hello\"",
                    "            return \"Hello World\"",
                    "        self.register(\"regStrStr\", regStrStr)"
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/reg-backend.py",
                "lineEnd": 18,
                "lineStart": 13
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"regStrStr\", \"Hello\").then { (s: String) in",
                    "            print(s) // Expects a String, like \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello World\"",
                "file": "../swift/example/reg-client.swift",
                "lineEnd": 10,
                "lineStart": 7
            },
            "register": {
                "code": [
                    "        register(\"regStrStr\") { (s: String) -> String in",
                    "            print(s) // Expects a String, like \"Hello\"",
                    "            return \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../swift/example/reg-backend.swift",
                "lineEnd": 11,
                "lineStart": 7
            }
        }
    },
    "Want Definitions Models": {
        "python": {
            "defs": {
                "code": [
                    "# In Python you must import:",
                    "import riffle",
                    "from riffle import want",
                    "",
                    "# Declare a User class",
                    "class User(riffle.Model):",
                    "    name = \"default\"",
                    "# define a function that is only called",
                    "# if a User is passed:",
                    "@want(User)",
                    "def myFunction(u):",
                    "    print(u.name) # User class",
                    "# call a function and expect the result to be",
                    "# a User class",
                    "u = example.call(\"get_user\").wait(User)",
                    "",
                    "# NOTE: each @want must decorate a function",
                    "# below, we removed them for clarity",
                    "",
                    "# A basic model of a Student",
                    "class Student(riffle.Model):",
                    "    first = \"firstName\"",
                    "    last = \"lastName\"",
                    "    grade = 0",
                    "@want(Student) # Decorate expecting a Student class",
                    "# Require a Student class is returned",
                    "s = example.call(\"get_student\").wait(Student)",
                    "",
                    "# A model that contains a collection of models",
                    "class Student(riffle.Model):",
                    "    first = \"firstName\"",
                    "    last = \"lastName\"",
                    "    grade = 0",
                    "class Classroom(riffle.Model):",
                    "    students = list(Student)",
                    "    roomNumber = 0",
                    "@want(Classroom) # Decorate expecting a Classroom class",
                    "# Require a Classroom class is returned",
                    "c = example.call(\"get_classroom\").wait(Classroom)",
                    "",
                    "# You could also define the object directly, but it",
                    "# wouldn't contain any functions defined in the class",
                    "class User(riffle.Model):",
                    "    first = \"firstName\"",
                    "    def setFirst(self, name):",
                    "        self.first = name",
                    "# The result here enables u.setFirst('a')",
                    "@want(User) # Decorate to get a User",
                    "# Require a User so u.setFirst() can be called",
                    "u = example.call(\"get_user\").wait(User)",
                    "# The result here won't have a u.setFirst() function",
                    "# because it is a dict not a User class",
                    "@want({\"first\": str})",
                    "u = example.call(\"get_user\").wait({\"first\": str})",
                    ""
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/definitions-models.py",
                "lineEnd": 58,
                "lineStart": 3
            }
        }
    },
    "Want Definitions Recv": {
        "python": {
            "defs": {
                "code": [
                    "",
                    "# In Python you must import want to use as",
                    "# a decorator",
                    "from riffle import want",
                    "",
                    "# After importing want, you simply decorate",
                    "# any function with it.",
                    "@want(str)",
                    "def myFunction(aString):",
                    "    print(aString) # Guaranteed str",
                    "# resulting function will only be called with",
                    "# the args if they are of the type specified",
                    "",
                    "# NOTE: each @want must decorate a function",
                    "# below, we removed them for clarity",
                    "",
                    "# Nothing is returned",
                    "@want()",
                    "",
                    "# The primitives",
                    "@want(str)",
                    "@want(int)",
                    "@want(float)",
                    "@want(bool)",
                    "",
                    "# Collections",
                    "@want(list) # A list of anything",
                    "@want(dict) # A dict containing anything",
                    "",
                    "# None is returned",
                    "@want(None)",
                    "",
                    "# Many arguments",
                    "@want(str, int, float) # 3 args: str, int, float",
                    "@want(str, [int]) # 2 args: str, list of many int's",
                    ""
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/definitions-recv.py",
                "lineEnd": 39,
                "lineStart": 3
            }
        }
    },
    "Want Definitions Send": {
        "python": {
            "defs": {
                "code": [
                    "",
                    "# In Python you must import riffle",
                    "import riffle",
                    "",
                    "# First setup your domain",
                    "app = riffle.Domain(\"xs.demo.test\")",
                    "me = riffle.Domain(\"me\", superdomain=app)",
                    "me.join() # Make the connection as me",
                    "# Create a domain reference to who you want to",
                    "# communicate with",
                    "ex = riffle.Domain(\"example\", superdomain=app)",
                    "",
                    "# Since any call function can return values,",
                    "# you can specify type arguments.",
                    "myStr = ex.call(\"hello\", \"arg\").wait(str)",
                    "# myStr is guaranteed to be a str, if the",
                    "# registered function (hello) returns anything",
                    "# else it will not return properly.",
                    "",
                    "# You expect nothing as a return",
                    "arg = ex.call(\"hello\").wait()",
                    "",
                    "# You can pass any primitive",
                    "arg = ex.call(\"hello\").wait(str)",
                    "arg = ex.call(\"hello\").wait(int)",
                    "arg = ex.call(\"hello\").wait(float)",
                    "arg = ex.call(\"hello\").wait(bool)",
                    "",
                    "# Collections",
                    "arg = ex.call(\"hello\").wait(list)",
                    "arg = ex.call(\"hello\").wait(dict)",
                    "",
                    "# None is returned",
                    "arg = ex.call(\"hello\").wait(None)",
                    "",
                    "# Many arguments",
                    "# a is str, b is int, c is float",
                    "a, b, c = ex.call(\"hello\").wait(str, int, float)",
                    "# d is str, e is a list of int's",
                    "d, e = ex.call(\"hello\").wait(str, [int])",
                    ""
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/definitions-send.py",
                "lineEnd": 44,
                "lineStart": 3
            }
        }
    }
}
