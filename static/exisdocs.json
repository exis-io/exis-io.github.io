{
    "Pub/Sub Basic": {
        "js": {
            "publish": {
                "code": [
                    "    backend.Publish(\"basicSub\", \"Hello\");"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/sub-client.js",
                "lineEnd": 14,
                "lineStart": 13
            },
            "subscribe": {
                "code": [
                    "    this.Subscribe(\"basicSub\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/sub-backend.js",
                "lineEnd": 26,
                "lineStart": 23
            }
        },
        "python": {
            "publish": {
                "code": [
                    "        self.publish(\"basicSub\", \"Hello\")"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/sub-client.py",
                "lineEnd": 14,
                "lineStart": 13
            },
            "subscribe": {
                "code": [
                    "        @want(str)",
                    "        def basicSub(s):",
                    "            print s  # Expects a str, like \"Hello\"",
                    "        self.subscribe(\"basicSub\", basicSub)"
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/sub-backend.py",
                "lineEnd": 18,
                "lineStart": 14
            }
        },
        "swift": {
            "publish": {
                "code": [
                    "        publish(\"xs.test.example/basicSub\", \"Hello\")"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../swift/example/sender.swift",
                "lineEnd": 11,
                "lineStart": 10
            },
            "subscribe": {
                "code": [
                    "        subscribe(\"sub\") { (a: Int, b: [String], c: Dog) in",
                    "            print(\"Received publish: \\(a), with list: \\(b), and pup: \\(c.description)\")",
                    "        }.then {",
                    "            print(\"Subscription succeeded\")",
                    "        }.error { reason in",
                    "            print(\"An error occured\", reason)",
                    "        }"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../swift/example/receiver.swift",
                "lineEnd": 31,
                "lineStart": 24
            }
        }
    },
    "Pub/Sub Basic Two": {
        "js": {
            "publish": {
                "code": [
                    "    backend.Publish(\"basicSubTwo\", \"Hello\", 3);"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/sub-client.js",
                "lineEnd": 18,
                "lineStart": 17
            },
            "subscribe": {
                "code": [
                    "    this.Subscribe(\"basicSubTwo\", riffle.want(function(s, i) {",
                    "        console.log(s, i); // Expects a String, Number, like \"Hello\", 3.0",
                    "    }, String, Number));"
                ],
                "expectType": "String, Number",
                "expectVal": "\"Hello\", 3.0",
                "file": "../js/example/sub-backend.js",
                "lineEnd": 32,
                "lineStart": 29
            }
        }
    },
    "Pub/Sub Objects": {
        "python": {
            "publish": {
                "code": [
                    "        class Stuff(riffle.Model):",
                    "            name = \"This guy\"",
                    "        s = Stuff()",
                    "        self.publish(\"objectSub\", s)"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/sub-client.py",
                "lineEnd": 21,
                "lineStart": 17
            },
            "subscribe": {
                "code": [
                    "        class Stuff(riffle.Model):",
                    "            name = \"\"",
                    "        @want(Stuff)",
                    "        def objectSub(o):",
                    "            print o  # Expects an object, like Stuff",
                    "",
                    "        self.subscribe(\"objectSub\", objectSub)"
                ],
                "expectType": "object",
                "expectVal": "Stuff",
                "file": "../python/example/sub-backend.py",
                "lineEnd": 28,
                "lineStart": 21
            }
        }
    },
    "REPL Template": {
        "js": {
            "template": {
                "code": [
                    "",
                    "var riffle = require('jsriffle');",
                    "",
                    "riffle.SetFabricSandbox();",
                    "",
                    "var app = riffle.Domain(\"xs.demo.test\");",
                    "var backend = app.Subdomain(\"backend\");",
                    "",
                    "backend.onJoin = function() {",
                    "",
                    "    // Exis code goes here",
                    "",
                    "};",
                    "",
                    "backend.Join()"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/repl-template.js",
                "lineEnd": 18,
                "lineStart": 3
            }
        },
        "python": {
            "template": {
                "code": [
                    "import riffle",
                    "from riffle import want",
                    "",
                    "riffle.SetFabricSandbox()",
                    "",
                    "class Backend(riffle.Domain):",
                    "",
                    "    def onJoin(self):",
                    "",
                    "        # Exis code goes here",
                    "",
                    "",
                    "app = riffle.Domain(\"xs.demo.test\")",
                    "",
                    "Backend(\"backend\", superdomain=app).join()"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/repl-template.py",
                "lineEnd": 18,
                "lineStart": 3
            }
        },
        "swift": {
            "template": {
                "code": [
                    "import Foundation",
                    "import Riffle",
                    "",
                    "// This connects us to the sandbox fabric",
                    "Riffle.SetFabricSandbox()",
                    "",
                    "class ExisBackend: Riffle.Domain, Riffle.Delegate  {",
                    "",
                    "    // When the connection is established this function is called",
                    "    override func onJoin() {",
                    "",
                    "        // Exis code goes here",
                    "",
                    "    }",
                    "}",
                    "",
                    "// Setup the domain here",
                    "ExisBackend(name: \"xs.demo.test.backend\").join()",
                    ""
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../swift/example/repl-template.swift",
                "lineEnd": 22,
                "lineStart": 3
            }
        }
    },
    "Reg/Call Basic 1": {
        "swift": {
            "call": {
                "code": [
                    "        call(\"xs.test.example/basicReg\", \"Hello\").then { (a: String) in",
                    "            print(\"\\(a)\") // Expects a String, like \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello World\"",
                "file": "../swift/example/sender.swift",
                "lineEnd": 17,
                "lineStart": 14
            },
            "register": {
                "code": [
                    "        register(\"basicReg\") { (args: String) -> String in",
                    "            print(\"\\(args)\") // Expects a String, like \"Hello\"",
                    "            return \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../swift/example/receiver.swift",
                "lineEnd": 38,
                "lineStart": 34
            }
        }
    },
    "Reg/Call int str": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"regIntStr\", 42).then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a str, like \"Hello World\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "str",
                "expectVal": "\"Hello World\"",
                "file": "../js/example/reg-client.js",
                "lineEnd": 37,
                "lineStart": 31
            },
            "register": {
                "code": [
                    "    this.Register(\"regIntStr\", riffle.want(function(i) {",
                    "        console.log(i); // Expects a Number, like 42",
                    "        return \"Hello World\";",
                    "    }, Number));"
                ],
                "expectType": "Number",
                "expectVal": "42",
                "file": "../js/example/reg-backend.js",
                "lineEnd": 30,
                "lineStart": 26
            }
        },
        "python": {
            "call": {
                "code": [
                    "        s = backend.call(\"regIntStr\", 42).wait(str)",
                    "        print s # Expects a str, like \"Hello World\""
                ],
                "expectType": "str",
                "expectVal": "\"Hello World\"",
                "file": "../python/example/reg-client.py",
                "lineEnd": 26,
                "lineStart": 24
            },
            "register": {
                "code": [
                    "        @want(int)",
                    "        def regIntStr(i):",
                    "            print(i)  # Expects an int, like 42",
                    "            return \"Hello World\"",
                    "        self.register(\"regIntStr\", regIntStr)"
                ],
                "expectType": "int",
                "expectVal": "42",
                "file": "../python/example/reg-backend.py",
                "lineEnd": 34,
                "lineStart": 29
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"regIntStr\", 42).then { (s: String) in",
                    "            print(s) // Expects a String, like \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello World\"",
                "file": "../swift/example/reg-client.swift",
                "lineEnd": 22,
                "lineStart": 19
            },
            "register": {
                "code": [
                    "        register(\"regIntStr\") { (i: Int) -> String in",
                    "            print(i) // Expects an Int, like 42",
                    "            return \"Hello World\"",
                    "        }"
                ],
                "expectType": "Int",
                "expectVal": "42",
                "file": "../swift/example/reg-backend.swift",
                "lineEnd": 25,
                "lineStart": 21
            }
        }
    },
    "Reg/Call str int": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"regStrInt\", \"Hello\").then(riffle.wait(function (i) {",
                    "        console.log(i); // Expects an int, like 42",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "int",
                "expectVal": "42",
                "file": "../js/example/reg-client.js",
                "lineEnd": 28,
                "lineStart": 22
            },
            "register": {
                "code": [
                    "    this.Register(\"regStrInt\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "        return 42;",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/reg-backend.js",
                "lineEnd": 23,
                "lineStart": 19
            }
        },
        "python": {
            "call": {
                "code": [
                    "        i = backend.call(\"regStrInt\", \"Hello\").wait(int)",
                    "        print i # Expects an int, like 42"
                ],
                "expectType": "int",
                "expectVal": "42",
                "file": "../python/example/reg-client.py",
                "lineEnd": 21,
                "lineStart": 19
            },
            "register": {
                "code": [
                    "        @want(str)",
                    "        def regStrInt(s):",
                    "            print(s)  # Expects a str, like \"Hello\"",
                    "            return 42",
                    "        self.register(\"regStrInt\", regStrInt)"
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/reg-backend.py",
                "lineEnd": 26,
                "lineStart": 21
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"regStrInt\", \"Hello\").then { (i: Int) in",
                    "            print(\"\\(i)\") // Expects an Int, like 42",
                    "        }"
                ],
                "expectType": "Int",
                "expectVal": "42",
                "file": "../swift/example/reg-client.swift",
                "lineEnd": 16,
                "lineStart": 13
            },
            "register": {
                "code": [
                    "        register(\"regStrInt\") { (s: String) -> Int in",
                    "            print(s) // Expects a String, like \"Hello\"",
                    "            return 42",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../swift/example/reg-backend.swift",
                "lineEnd": 18,
                "lineStart": 14
            }
        }
    },
    "Reg/Call str str": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"regStrStr\", \"Hello\").then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a str, like \"Hello World\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "str",
                "expectVal": "\"Hello World\"",
                "file": "../js/example/reg-client.js",
                "lineEnd": 19,
                "lineStart": 13
            },
            "register": {
                "code": [
                    "    this.Register(\"regStrStr\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "        return \"Hello World\";",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/reg-backend.js",
                "lineEnd": 16,
                "lineStart": 12
            }
        },
        "python": {
            "call": {
                "code": [
                    "        s = backend.call(\"regStrStr\", \"Hello\").wait(str)",
                    "        print s # Expects a str, like \"Hello World\""
                ],
                "expectType": "str",
                "expectVal": "\"Hello World\"",
                "file": "../python/example/reg-client.py",
                "lineEnd": 16,
                "lineStart": 14
            },
            "register": {
                "code": [
                    "        @want(str)",
                    "        def regStrStr(s):",
                    "            print(s)  # Expects a str, like \"Hello\"",
                    "            return \"Hello World\"",
                    "        self.register(\"regStrStr\", regStrStr)"
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/reg-backend.py",
                "lineEnd": 18,
                "lineStart": 13
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"regStrStr\", \"Hello\").then { (s: String) in",
                    "            print(s) // Expects a String, like \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello World\"",
                "file": "../swift/example/reg-client.swift",
                "lineEnd": 10,
                "lineStart": 7
            },
            "register": {
                "code": [
                    "        register(\"regStrStr\") { (s: String) -> String in",
                    "            print(s) // Expects a String, like \"Hello\"",
                    "            return \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../swift/example/reg-backend.swift",
                "lineEnd": 11,
                "lineStart": 7
            }
        }
    },
    "Tour Basics 1": {
        "js": {
            "simple": {
                "code": [
                    "    console.log(\"Hello World\");"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/tour-basics.js",
                "lineEnd": 14,
                "lineStart": 13
            }
        },
        "python": {
            "simple": {
                "code": [
                    "        print \"Hello World\""
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/tour-basics.py",
                "lineEnd": 16,
                "lineStart": 15
            }
        },
        "swift": {
            "simple": {
                "code": [
                    "        print(\"Hello World\")"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../swift/example/tour-basics.swift",
                "lineEnd": 9,
                "lineStart": 8
            }
        }
    },
    "Tour Basics 2": {
        "js": {
            "publish": {
                "code": [
                    "    for(var i = 0; i < 10; i++) {",
                    "        this.Publish(\"async\", i);",
                    "    }"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/tour-basics.js",
                "lineEnd": 26,
                "lineStart": 23
            },
            "subscribe": {
                "code": [
                    "    this.Subscribe(\"async\", riffle.want(function(i) {",
                    "        console.log(i);",
                    "    }, Number));"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/tour-basics.js",
                "lineEnd": 20,
                "lineStart": 17
            }
        },
        "python": {
            "publish": {
                "code": [
                    "        for i in range(0, 10):",
                    "            backend.publish(\"async\", i)"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/tour-basics.py",
                "lineEnd": 28,
                "lineStart": 26
            },
            "subscribe": {
                "code": [
                    "        @want(int)",
                    "        def async(i):",
                    "            print i",
                    "        self.subscribe(\"async\", async)"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/tour-basics.py",
                "lineEnd": 23,
                "lineStart": 19
            }
        },
        "swift": {
            "publish": {
                "code": [
                    "        for i in 0...10 {",
                    "            publish(\"async\", i)",
                    "        }"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../swift/example/tour-basics.swift",
                "lineEnd": 21,
                "lineStart": 18
            },
            "subscribe": {
                "code": [
                    "        subscribe(\"async\") { (i: Int) in",
                    "            print(\"\\(i)\")",
                    "        }"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../swift/example/tour-basics.swift",
                "lineEnd": 15,
                "lineStart": 12
            }
        }
    },
    "Tour Pub/Sub Lesson 1": {
        "js": {
            "publish": {
                "code": [
                    "    backend.Publish(\"myFirstSub\", \"Hello\");"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/tour-sub-client.js",
                "lineEnd": 14,
                "lineStart": 13
            },
            "subscribe": {
                "code": [
                    "    this.Subscribe(\"myFirstSub\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/tour-sub-backend.js",
                "lineEnd": 16,
                "lineStart": 13
            }
        },
        "python": {
            "publish": {
                "code": [
                    "        backend.publish(\"myFirstSub\", \"Hello\")"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/tour-sub-client.py",
                "lineEnd": 16,
                "lineStart": 15
            },
            "subscribe": {
                "code": [
                    "        @want(str)",
                    "        def myFirstSub(s):",
                    "            print(s)  # Expects a str, like \"Hello\"",
                    "        self.subscribe(\"myFirstSub\", myFirstSub)"
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/tour-sub-backend.py",
                "lineEnd": 18,
                "lineStart": 14
            }
        }
    },
    "Tour Reg/Call Lesson 1": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"myFirstCall\", \"Hello\").then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a String, like \"Hello World\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "String",
                "expectVal": "\"Hello World\"",
                "file": "../js/example/tour-reg-client.js",
                "lineEnd": 19,
                "lineStart": 13
            },
            "register": {
                "code": [
                    "    this.Register(\"myFirstCall\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "        return s + \" World\";",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/tour-reg-backend.js",
                "lineEnd": 17,
                "lineStart": 13
            }
        },
        "python": {
            "call": {
                "code": [
                    "        @want(str)",
                    "        def myFirstCall(s):",
                    "            print(s)  # Expects a str, like \"Hello\"",
                    "            return \"{} World\".format(s)",
                    "        self.register(\"myFirstCall\", myFirstCall)"
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/tour-reg-backend.py",
                "lineEnd": 19,
                "lineStart": 14
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"myFirstCall\", \"Hello\").then { (s: String) in",
                    "            print(s) // Expects a String, like \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello World\"",
                "file": "../swift/example/tour-reg-client.swift",
                "lineEnd": 11,
                "lineStart": 8
            },
            "register": {
                "code": [
                    "        register(\"myFirstCall\") { (s: String) -> String in",
                    "            print(s) // Expects a String, like \"Hello\"",
                    "            return \"Hello World\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../swift/example/tour-reg-backend.swift",
                "lineEnd": 12,
                "lineStart": 8
            }
        }
    },
    "Tour Reg/Call Lesson 2 Fails": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"iWantInts\", \"Hi\").then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a String, like \"Thanks for saying Hi\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err); // Errors with \"Cumin: expecting primitive float, got string\"",
                    "    });"
                ],
                "expectType": "String",
                "expectVal": "\"Thanks for saying Hi\"",
                "file": "../js/example/tour-reg-client.js",
                "lineEnd": 38,
                "lineStart": 32
            },
            "register": {
                "code": [
                    "    this.Register(\"iWantInts\", riffle.want(function(i) {",
                    "        console.log(i); // Expects a Number, like 42",
                    "        return \"Thanks for sending int \" + i;",
                    "    }, Number));"
                ],
                "expectType": "Number",
                "expectVal": "42",
                "file": "../js/example/tour-reg-backend.js",
                "lineEnd": 32,
                "lineStart": 28
            }
        },
        "python": {
            "call": {
                "code": [
                    "        try:",
                    "            s = backend.call(\"iWantInts\", \"Hi\").wait(str)",
                    "            print s # Expects a str, like \"Thanks for sending int 42\"",
                    "        except riffle.Error as e:",
                    "            print e # Errors with \"Cumin: expecting primitive int, got string\""
                ],
                "expectType": "str",
                "expectVal": "\"Thanks for sending int 42\"",
                "file": "../python/example/tour-reg-client.py",
                "lineEnd": 31,
                "lineStart": 26
            },
            "register": {
                "code": [
                    "        @want(int)",
                    "        def iWantInts(i):",
                    "            print(i)  # Expects an int, like 42",
                    "            return \"Thanks for sending int {}\".format(i)",
                    "        self.register(\"iWantInts\", iWantInts)"
                ],
                "expectType": "int",
                "expectVal": "42",
                "file": "../python/example/tour-reg-backend.py",
                "lineEnd": 36,
                "lineStart": 31
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"iWantInts\", \"Hi\").then { (s: String) in",
                    "            print(s) // Expects a String, like \"Thanks for sending int 42\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Thanks for sending int 42\"",
                "file": "../swift/example/tour-reg-client.swift",
                "lineEnd": 24,
                "lineStart": 21
            },
            "register": {
                "code": [
                    "        register(\"iWantInts\") { (i: Int) -> String in",
                    "            print(i) // Expects an Int, like 42",
                    "            return \"Thanks for sending int \\(i)\"",
                    "        }"
                ],
                "expectType": "Int",
                "expectVal": "42",
                "file": "../swift/example/tour-reg-backend.swift",
                "lineEnd": 27,
                "lineStart": 23
            }
        }
    },
    "Tour Reg/Call Lesson 2 Wait Check": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"iGiveInts\", \"Hi\").then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a String, like \"Hello\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err); // Errors with \"Cumin: expecting primitive float, got string\"",
                    "    });"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../js/example/tour-reg-client.js",
                "lineEnd": 47,
                "lineStart": 41
            },
            "register": {
                "code": [
                    "    this.Register(\"iGiveInts\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hi\"",
                    "        return 42;",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hi\"",
                "file": "../js/example/tour-reg-backend.js",
                "lineEnd": 39,
                "lineStart": 35
            }
        },
        "python": {
            "call": {
                "code": [
                    "        try:",
                    "            s = backend.call(\"iGiveInts\", \"Hi\").wait(str)",
                    "            print s # Expects a str, like \"Hello\"",
                    "        except riffle.Error as e:",
                    "            print e # Errors with \"Cumin: expecting primitive int, got string\""
                ],
                "expectType": "str",
                "expectVal": "\"Hello\"",
                "file": "../python/example/tour-reg-client.py",
                "lineEnd": 39,
                "lineStart": 34
            },
            "register": {
                "code": [
                    "        @want(str)",
                    "        def iGiveInts(s):",
                    "            print(s)  # Expects a str, like \"Hi\"",
                    "            return 42",
                    "        self.register(\"iGiveInts\", iGiveInts)"
                ],
                "expectType": "str",
                "expectVal": "\"Hi\"",
                "file": "../python/example/tour-reg-backend.py",
                "lineEnd": 44,
                "lineStart": 39
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"iGiveInts\", \"Hi\").then { (s: String) in",
                    "            print(s) // Expects a String, like \"Hello\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hello\"",
                "file": "../swift/example/tour-reg-client.swift",
                "lineEnd": 30,
                "lineStart": 27
            },
            "register": {
                "code": [
                    "        register(\"iGiveInts\") { (s: String) -> Int in",
                    "            print(s) // Expects a String, like \"Hi\"",
                    "            return 42",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hi\"",
                "file": "../swift/example/tour-reg-backend.swift",
                "lineEnd": 34,
                "lineStart": 30
            }
        }
    },
    "Tour Reg/Call Lesson 2 Works": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"iWantStrings\", \"Hi\").then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a String, like \"Thanks for saying Hi\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "String",
                "expectVal": "\"Thanks for saying Hi\"",
                "file": "../js/example/tour-reg-client.js",
                "lineEnd": 29,
                "lineStart": 23
            },
            "register": {
                "code": [
                    "    this.Register(\"iWantStrings\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a String, like \"Hi\"",
                    "        return \"Thanks for saying \" + s;",
                    "    }, String));"
                ],
                "expectType": "String",
                "expectVal": "\"Hi\"",
                "file": "../js/example/tour-reg-backend.js",
                "lineEnd": 25,
                "lineStart": 21
            }
        },
        "python": {
            "call": {
                "code": [
                    "        s = backend.call(\"iWantStrings\", \"Hi\").wait(str)",
                    "        print s # Expects a str, like \"Thanks for saying Hi\""
                ],
                "expectType": "str",
                "expectVal": "\"Thanks for saying Hi\"",
                "file": "../python/example/tour-reg-client.py",
                "lineEnd": 23,
                "lineStart": 21
            },
            "register": {
                "code": [
                    "        @want(str)",
                    "        def iWantStrings(s):",
                    "            print(s)  # Expects a str, like \"Hi\"",
                    "            return \"Thanks for saying {}\".format(s)",
                    "        self.register(\"iWantStrings\", iWantStrings)"
                ],
                "expectType": "str",
                "expectVal": "\"Hi\"",
                "file": "../python/example/tour-reg-backend.py",
                "lineEnd": 28,
                "lineStart": 23
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"iWantStrings\", \"Hi\").then { (s: String) in",
                    "            print(s) // Expects a String, like \"Thanks for saying Hi\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Thanks for saying Hi\"",
                "file": "../swift/example/tour-reg-client.swift",
                "lineEnd": 18,
                "lineStart": 15
            },
            "register": {
                "code": [
                    "        register(\"iWantStrings\") { (s: String) -> String in",
                    "            print(s) // Expects a String, like \"Hi\"",
                    "            return \"Thanks for saying \" + s",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Hi\"",
                "file": "../swift/example/tour-reg-backend.swift",
                "lineEnd": 20,
                "lineStart": 16
            }
        }
    },
    "Tour Reg/Call Lesson 3 Fails": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"iWantManyInts\", [0, 1, \"two\"]).then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a String, like \"Thanks for 3 ints!\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err); // Errors with \"Cumin: expecting primitive float, got string\"",
                    "    });"
                ],
                "expectType": "String",
                "expectVal": "\"Thanks for 3 ints!\"",
                "file": "../js/example/tour-reg-client.js",
                "lineEnd": 66,
                "lineStart": 60
            },
            "register": {
                "code": [
                    "    this.Register(\"iWantManyInts\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a new riffle.ArrayWithType(Number), like [0, 1, 2]",
                    "        return \"Thanks for \" + s.length + \" ints!\"",
                    "    }, new riffle.ArrayWithType(Number)));"
                ],
                "expectType": "new riffle.ArrayWithType(Number)",
                "expectVal": "[0, 1, 2]",
                "file": "../js/example/tour-reg-backend.js",
                "lineEnd": 54,
                "lineStart": 50
            }
        },
        "python": {
            "call": {
                "code": [
                    "        try:",
                    "            s = backend.call(\"iWantManyInts\", [0, 1, \"two\"]).wait(str)",
                    "            print s # Expects a str, like \"Thanks for 3 ints!\"",
                    "        except riffle.Error as e:",
                    "            print e # Errors with \"Cumin: expecting primitive int, got string\""
                ],
                "expectType": "str",
                "expectVal": "\"Thanks for 3 ints!\"",
                "file": "../python/example/tour-reg-client.py",
                "lineEnd": 53,
                "lineStart": 48
            },
            "register": {
                "code": [
                    "        @want([int])",
                    "        def iWantManyInts(i):",
                    "            print(i)  # Expects a [int], like [0, 1, 2]",
                    "            return \"Thanks for {} ints!\".format(len(i))",
                    "        self.register(\"iWantManyInts\", iWantManyInts)"
                ],
                "expectType": "[int]",
                "expectVal": "[0, 1, 2]",
                "file": "../python/example/tour-reg-backend.py",
                "lineEnd": 61,
                "lineStart": 56
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        let notAllInts: [Any] = [0, 1, \"two\"]",
                    "        call(\"iWantManyInts\", notAllInts).then { (s: String) in",
                    "            print(s) // Expects a String, like \"Thanks for 3 ints!\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Thanks for 3 ints!\"",
                "file": "../swift/example/tour-reg-client.swift",
                "lineEnd": 44,
                "lineStart": 40
            },
            "register": {
                "code": [
                    "        register(\"iWantManyInts\") { (i: [Int]) -> String in",
                    "            print(i) // Expects an [Int], like [0, 1, 2]",
                    "            return \"Thanks for \\(i.count) ints!\"",
                    "        }"
                ],
                "expectType": "[Int]",
                "expectVal": "[0, 1, 2]",
                "file": "../swift/example/tour-reg-backend.swift",
                "lineEnd": 49,
                "lineStart": 45
            }
        }
    },
    "Tour Reg/Call Lesson 3 Works": {
        "js": {
            "call": {
                "code": [
                    "    backend.Call(\"iWantManyStrings\", [\"This\", \"is\", \"cool\"]).then(riffle.wait(function (s) {",
                    "        console.log(s); // Expects a String, like \"Thanks for 3 strings!\"",
                    "    }, String),",
                    "    function (err) {",
                    "        console.log(\"ERROR: \", err);",
                    "    });"
                ],
                "expectType": "String",
                "expectVal": "\"Thanks for 3 strings!\"",
                "file": "../js/example/tour-reg-client.js",
                "lineEnd": 57,
                "lineStart": 51
            },
            "register": {
                "code": [
                    "    this.Register(\"iWantManyStrings\", riffle.want(function(s) {",
                    "        console.log(s); // Expects a new riffle.ArrayWithType(String), like [\"This\", \"is\", \"cool\"]",
                    "        return \"Thanks for \" + s.length + \" strings!\"",
                    "    }, new riffle.ArrayWithType(String)));"
                ],
                "expectType": "new riffle.ArrayWithType(String)",
                "expectVal": "[\"This\", \"is\", \"cool\"]",
                "file": "../js/example/tour-reg-backend.js",
                "lineEnd": 47,
                "lineStart": 43
            }
        },
        "python": {
            "call": {
                "code": [
                    "        s = backend.call(\"iWantManyStrings\", [\"This\", \"is\", \"cool\"]).wait(str)",
                    "        print s # Expects a str, like \"Thanks for 3 strings!\""
                ],
                "expectType": "str",
                "expectVal": "\"Thanks for 3 strings!\"",
                "file": "../python/example/tour-reg-client.py",
                "lineEnd": 45,
                "lineStart": 43
            },
            "register": {
                "code": [
                    "        @want([str])",
                    "        def iWantManyStrings(s):",
                    "            print(s)  # Expects a [str], like [\"This\", \"is\", \"cool\"]",
                    "            return \"Thanks for {} strings!\".format(len(s))",
                    "        self.register(\"iWantManyStrings\", iWantManyStrings)"
                ],
                "expectType": "[str]",
                "expectVal": "[\"This\", \"is\", \"cool\"]",
                "file": "../python/example/tour-reg-backend.py",
                "lineEnd": 53,
                "lineStart": 48
            }
        },
        "swift": {
            "call": {
                "code": [
                    "        call(\"iWantManyStrings\", [\"This\", \"is\", \"cool\"]).then { (s: String) in",
                    "            print(s) // Expects a String, like \"Thanks for 3 strings!\"",
                    "        }"
                ],
                "expectType": "String",
                "expectVal": "\"Thanks for 3 strings!\"",
                "file": "../swift/example/tour-reg-client.swift",
                "lineEnd": 37,
                "lineStart": 34
            },
            "register": {
                "code": [
                    "        register(\"iWantManyStrings\") { (s: [String]) -> String in",
                    "            print(s) // Expects an [String], like [\"This\", \"is\", \"cool\"]",
                    "            return \"Thanks for \\(s.count) strings!\"",
                    "        }"
                ],
                "expectType": "[String]",
                "expectVal": "[\"This\", \"is\", \"cool\"]",
                "file": "../swift/example/tour-reg-backend.swift",
                "lineEnd": 42,
                "lineStart": 38
            }
        }
    },
    "Tour Reg/Call Lesson 4 Basic Student": {
        "js": {
            "call": {
                "code": [
                    "    function Student() {",
                    "        this.name = \"Student Name\";",
                    "        this.age = 20;",
                    "        this.studentID = 0;",
                    "    }",
                    "    var s = new Student();",
                    "    s.name = \"John Smith\"",
                    "    s.age = 18",
                    "    s.studentID = 1234",
                    "    backend.Call(\"sendStudent\", s);"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../js/example/tour-reg-client.js",
                "lineEnd": 80,
                "lineStart": 70
            },
            "register": {
                "code": [
                    "    function Student() {",
                    "        this.name = \"Student Name\";",
                    "        this.age = 20;",
                    "        this.studentID = 0;",
                    "    }",
                    "    Student.prototype.toString = function() {",
                    "        return this.name + \", Age: \" + this.age + \", ID: \" + this.studentID;",
                    "    }",
                    "    var s = new Student();",
                    "    s.name = \"John Smith\"",
                    "    s.age = 18",
                    "    s.studentID = 1234",
                    "    this.Register(\"sendStudent\", riffle.want(function(s) {",
                    "        console.log(s.toString()); // Expects a Student, like \"John Smith, Age: 18, ID: 1234\"",
                    "    }, new riffle.ObjectToClass(Student, Object)));"
                ],
                "expectType": "Student",
                "expectVal": "\"John Smith, Age: 18, ID: 1234\"",
                "file": "../js/example/tour-reg-backend.js",
                "lineEnd": 73,
                "lineStart": 58
            }
        },
        "python": {
            "call": {
                "code": [
                    "        class Student(riffle.Model):",
                    "            name = \"Student Name\"",
                    "            age = 20",
                    "            studentID = 0",
                    "        s = Student()",
                    "        s.name = \"John Smith\"",
                    "        s.age = 18",
                    "        s.studentID = 1234",
                    "        backend.call(\"sendStudent\", s).wait()"
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/tour-reg-client.py",
                "lineEnd": 66,
                "lineStart": 57
            },
            "register": {
                "code": [
                    "        class Student(riffle.Model):",
                    "            name = \"Student Name\"",
                    "            age = 20",
                    "            studentID = 0",
                    "            def __str__(self):",
                    "                return \"{}, Age: {}, ID: {}\".format(self.name, self.age, self.studentID)",
                    "        @want(Student)",
                    "        def sendStudent(s):",
                    "            print s # Expects a Student, like \"John Smith, Age: 18, ID: 1234\"",
                    "        self.register(\"sendStudent\", sendStudent)"
                ],
                "expectType": "Student",
                "expectVal": "\"John Smith, Age: 18, ID: 1234\"",
                "file": "../python/example/tour-reg-backend.py",
                "lineEnd": 75,
                "lineStart": 65
            }
        }
    },
    "Tour Reg/Call Lesson 4 Student Functions": {
        "python": {
            "call": {
                "code": [
                    "        class Student(riffle.Model):",
                    "            name, age, studentID = \"Student Name\", 20, 0",
                    "        s = Student()",
                    "        s.name, s.age, s.studentID = \"John Smith\", 18, 1234",
                    "        s = backend.call(\"changeStudentID\", s).wait(Student)",
                    "        print s.studentID # Expects an int, like 5678"
                ],
                "expectType": "int",
                "expectVal": "5678",
                "file": "../python/example/tour-reg-client.py",
                "lineEnd": 75,
                "lineStart": 69
            },
            "register": {
                "code": [
                    "        class Student(riffle.Model):",
                    "            name, age, studentID = \"Student Name\", 20, 0",
                    "            def changeID(self, newID):",
                    "                self.studentID = 5678",
                    "        @want(Student)",
                    "        def changeStudentID(s):",
                    "            print s.studentID # Expects an int, like 1234",
                    "            s.changeID(5678)",
                    "            return s",
                    "        self.register(\"changeStudentID\", changeStudentID)"
                ],
                "expectType": "int",
                "expectVal": "1234",
                "file": "../python/example/tour-reg-backend.py",
                "lineEnd": 88,
                "lineStart": 78
            }
        }
    },
    "Want Definitions Models": {
        "python": {
            "defs": {
                "code": [
                    "# In Python you must import:",
                    "import riffle",
                    "from riffle import want",
                    "",
                    "# Declare a User class",
                    "class User(riffle.Model):",
                    "    name = \"default\"",
                    "# define a function that is only called",
                    "# if a User is passed:",
                    "@want(User)",
                    "def myFunction(u):",
                    "    print(u.name) # User class",
                    "# call a function and expect the result to be",
                    "# a User class",
                    "u = example.call(\"get_user\").wait(User)",
                    "",
                    "# NOTE: each @want must decorate a function",
                    "# below, we removed them for clarity",
                    "",
                    "# A basic model of a Student",
                    "class Student(riffle.Model):",
                    "    first = \"firstName\"",
                    "    last = \"lastName\"",
                    "    grade = 0",
                    "@want(Student) # Decorate expecting a Student class",
                    "# Require a Student class is returned",
                    "s = example.call(\"get_student\").wait(Student)",
                    "",
                    "# A model that contains a collection of models",
                    "class Student(riffle.Model):",
                    "    first = \"firstName\"",
                    "    last = \"lastName\"",
                    "    grade = 0",
                    "class Classroom(riffle.Model):",
                    "    students = list(Student)",
                    "    roomNumber = 0",
                    "@want(Classroom) # Decorate expecting a Classroom class",
                    "# Require a Classroom class is returned",
                    "c = example.call(\"get_classroom\").wait(Classroom)",
                    "",
                    "# You could also define the object directly, but it",
                    "# wouldn't contain any functions defined in the class",
                    "class User(riffle.Model):",
                    "    first = \"firstName\"",
                    "    def setFirst(self, name):",
                    "        self.first = name",
                    "# The result here enables u.setFirst('a')",
                    "@want(User) # Decorate to get a User",
                    "# Require a User so u.setFirst() can be called",
                    "u = example.call(\"get_user\").wait(User)",
                    "# The result here won't have a u.setFirst() function",
                    "# because it is a dict not a User class",
                    "@want({\"first\": str})",
                    "u = example.call(\"get_user\").wait({\"first\": str})",
                    ""
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/definitions-models.py",
                "lineEnd": 58,
                "lineStart": 3
            }
        }
    },
    "Want Definitions Recv": {
        "python": {
            "defs": {
                "code": [
                    "",
                    "# In Python you must import want to use as",
                    "# a decorator",
                    "from riffle import want",
                    "",
                    "# After importing want, you simply decorate",
                    "# any function with it.",
                    "@want(str)",
                    "def myFunction(aString):",
                    "    print(aString) # Guaranteed str",
                    "# resulting function will only be called with",
                    "# the args if they are of the type specified",
                    "",
                    "# NOTE: each @want must decorate a function",
                    "# below, we removed them for clarity",
                    "",
                    "# Nothing is returned",
                    "@want()",
                    "",
                    "# The primitives",
                    "@want(str)",
                    "@want(int)",
                    "@want(float)",
                    "@want(bool)",
                    "",
                    "# Collections",
                    "@want(list) # A list of anything",
                    "@want(dict) # A dict containing anything",
                    "",
                    "# None is returned",
                    "@want(None)",
                    "",
                    "# Many arguments",
                    "@want(str, int, float) # 3 args: str, int, float",
                    "@want(str, [int]) # 2 args: str, list of many int's",
                    ""
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/definitions-recv.py",
                "lineEnd": 39,
                "lineStart": 3
            }
        }
    },
    "Want Definitions Send": {
        "python": {
            "defs": {
                "code": [
                    "",
                    "# In Python you must import riffle",
                    "import riffle",
                    "",
                    "# First setup your domain",
                    "app = riffle.Domain(\"xs.demo.test\")",
                    "me = riffle.Domain(\"me\", superdomain=app)",
                    "me.join() # Make the connection as me",
                    "# Create a domain reference to who you want to",
                    "# communicate with",
                    "ex = riffle.Domain(\"example\", superdomain=app)",
                    "",
                    "# Since any call function can return values,",
                    "# you can specify type arguments.",
                    "myStr = ex.call(\"hello\", \"arg\").wait(str)",
                    "# myStr is guaranteed to be a str, if the",
                    "# registered function (hello) returns anything",
                    "# else it will not return properly.",
                    "",
                    "# You expect nothing as a return",
                    "arg = ex.call(\"hello\").wait()",
                    "",
                    "# You can pass any primitive",
                    "arg = ex.call(\"hello\").wait(str)",
                    "arg = ex.call(\"hello\").wait(int)",
                    "arg = ex.call(\"hello\").wait(float)",
                    "arg = ex.call(\"hello\").wait(bool)",
                    "",
                    "# Collections",
                    "arg = ex.call(\"hello\").wait(list)",
                    "arg = ex.call(\"hello\").wait(dict)",
                    "",
                    "# None is returned",
                    "arg = ex.call(\"hello\").wait(None)",
                    "",
                    "# Many arguments",
                    "# a is str, b is int, c is float",
                    "a, b, c = ex.call(\"hello\").wait(str, int, float)",
                    "# d is str, e is a list of int's",
                    "d, e = ex.call(\"hello\").wait(str, [int])",
                    ""
                ],
                "expectType": null,
                "expectVal": null,
                "file": "../python/example/definitions-send.py",
                "lineEnd": 44,
                "lineStart": 3
            }
        }
    }
}
